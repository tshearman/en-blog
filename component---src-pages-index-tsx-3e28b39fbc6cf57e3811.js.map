{"version":3,"sources":["webpack:///./src/components/Publications/Publication/styles.ts","webpack:///./src/components/Publications/Publication/index.tsx","webpack:///./src/components/Publications/index.tsx","webpack:///./src/components/Experience/index.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/ui/Banner/styles.ts","webpack:///./src/components/ui/Banner/index.tsx","webpack:///./src/components/HeroBanner/index.tsx","webpack:///./src/components/utils/FormatHtml/index.tsx","webpack:///./src/components/ui/Timeline/styles.ts","webpack:///./src/components/ui/Timeline/index.tsx","webpack:///./src/components/Education/index.tsx"],"names":["Title","styled","span","Authors","Journal","Publication","authors","title","journal","year","link","href","join","Publications","useStaticQuery","markdownRemark","allMarkdownRemark","sectionTitle","frontmatter","publications","edges","Container","section","TitleSection","subtitle","map","item","node","id","month","pub","staticElement","renderToStaticMarkup","date","Timeline","startDate","content","Experience","experiences","html","company","position","endDate","key","ResumePage","Banner","div","center","FormatHtml","HeroBanner","heroBanner","className","style","maxWidth","dangerouslySetInnerHTML","__html","Details","Content","Subtitle","Date","Point","Education","education","university","degree"],"mappings":"+LAEaA,EAAQC,IAAOC,KAAV,oEAAGD,CAAH,6BAILE,EAAUF,IAAOC,KAAV,sEAAGD,CAAH,6BAIPG,EAAUH,IAAOC,KAAV,sEAAGD,CAAH,wBCgBLI,EAdsB,SAAC,GAA4C,IAA1CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACrE,OACE,uBAAGC,KAAMD,GACP,6BACE,kBAAC,EAAD,KAAiBJ,EAAQM,KAAK,OAC9B,8BAAO,MAAQH,EAAO,MACtB,kBAAC,EAAD,KAAe,IAAMF,GACrB,8BAAO,WACP,kBAAC,EAAD,KAAiBC,MC6DVK,IAxDgB,WAC7B,MAA8CC,YAAe,cAArDC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBA4BlBC,EAA6BF,EAAeG,YAC5CC,EAAkCH,EAAkBI,MAE1D,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAO,GAChB,kBAACC,EAAA,EAAD,CAAchB,MAAOU,EAAaV,MAAOiB,SAAUP,EAAaO,WAE/DL,EAAaM,KAAI,SAACC,GACjB,MAGIA,EAAKC,KAHT,KACEC,GADF,EAEEV,aAAeZ,EAFjB,EAEiBA,QAASC,EAF1B,EAE0BA,MAAOC,EAFjC,EAEiCA,QAASqB,EAF1C,EAE0CA,MAAOpB,EAFjD,EAEiDA,KAAMC,EAFvD,EAEuDA,KAGjDoB,EAAM,kBAAC,EAAD,CAAaxB,QAASA,EAASC,MAAOA,EAAOC,QAASA,EAASC,KAAMA,EAAMC,KAAMA,IACvFqB,EAAgBC,+BAAqBF,GACrCG,GAAQJ,EAASA,EAAQ,IAAO,IAAMpB,EAC5C,OACE,kBAACyB,EAAA,EAAD,CACEC,UAAWF,EACXG,QAASL,U,oCCzErB,yEAgFeM,IA1Dc,WAC3B,MAA8CvB,YAAe,cAArDC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBA4BlBC,EAA6BF,EAAeG,YAC5CoB,EAA4BtB,EAAkBI,MAEpD,OACE,kBAAC,IAAD,CAAWE,SAAO,GAChB,kBAAC,IAAD,CAAcf,MAAOU,EAAaV,MAAOiB,SAAUP,EAAaO,WAE/Dc,EAAYb,KAAI,SAACC,GAChB,MAIIA,EAAKC,KAHPC,EADF,EACEA,GACAW,EAFF,EAEEA,KAFF,IAGErB,YAAesB,EAHjB,EAGiBA,QAASC,EAH1B,EAG0BA,SAAUN,EAHpC,EAGoCA,UAAWO,EAH/C,EAG+CA,QAG/C,OACE,kBAAC,IAAD,CACEC,IAAKf,EACLrB,MAAOiC,EACPhB,SAAUiB,EACVL,QAASG,EACTJ,UAAWA,EACXO,QAASA,U,kCCxErB,wGAqBeE,UAZc,kBAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKrC,MAAM,WACX,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,6BACA,kBAAC,IAAD,MACA,6BACA,kBAAC,IAAD,S,uHCfSsC,EAAS5C,IAAOqB,QAAV,iEAAGrB,CAAH,oGCqBJ4C,GDfQ5C,IAAO6C,IAAV,kEAAG7C,CAAH,yBCMY,SAAC,GAAD,IAAGM,EAAH,EAAGA,MAAOiB,EAAV,EAAUA,SAAUY,EAApB,EAAoBA,QAApB,OAC9B,kBAAC,EAAD,KACE,kBAACf,EAAA,EAAD,CAAWC,SAAO,GAChB,kBAACC,EAAA,EAAD,CAAchB,MAAOA,EAAOiB,SAAUA,EAAUuB,QAAM,IACtD,kBAACC,EAAA,EAAD,CAAYZ,QAASA,QCkBZa,IAzBc,WAC3B,IAAQlC,EAAmBD,YAAe,cAAlCC,eAaFmC,EAAgCnC,EAAeG,YAErD,OACE,kBAAC,EAAD,CACEX,MAAO2C,EAAW3C,MAClBiB,SAAU0B,EAAW1B,SACrBY,QAASrB,EAAewB,S,oCC/B9B,yBAgBeS,IATqB,SAAC,GAAD,IAAGZ,EAAH,EAAGA,QAAH,IAAYe,iBAAZ,MAAwB,cAAxB,SAClC,yBAAKC,MAAO,CAAEC,SAAU,QACtBF,UAAWA,EACXG,wBAAyB,CACvBC,OAAQnB,O,mFCTDF,EAAWjC,IAAO6C,IAAV,uEAAG7C,CAAH,sPAkBRuD,EAAUvD,IAAO6C,IAAV,sEAAG7C,CAAH,6DAOPwD,EAAUxD,IAAO6C,IAAV,sEAAG7C,CAAH,6FASPD,EAAQC,IAAO6C,IAAV,oEAAG7C,CAAH,yCAKLyD,EAAWzD,IAAO6C,IAAV,uEAAG7C,CAAH,yCAKR0D,EAAO1D,IAAO6C,IAAV,mEAAG7C,CAAH,sOAcJ2D,EAAQ3D,IAAOC,KAAV,oEAAGD,CAAH,uMCjCHiC,IAdmB,SAAC,GAAD,IAAG3B,EAAH,EAAGA,MAAOiB,EAAV,EAAUA,SAAUY,EAApB,EAAoBA,QAASD,EAA7B,EAA6BA,UAAWO,EAAxC,EAAwCA,QAAxC,OAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGP,EADH,IACeO,GAAW,KAAKA,GAE9BnC,GAAS,kBAAC,EAAD,KAAeA,GACxBiB,GAAY,kBAAC,EAAD,KAAkBA,IAEhCY,GAAW,kBAAC,EAAD,KAAgB,kBAACY,EAAA,EAAD,CAAYZ,QAASA,Q,kCCvBrD,yEAgFeyB,IA1Da,WAC1B,MAA8C/C,YAAe,cAArDC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBA4BlBC,EAA6BF,EAAeG,YAC5C4C,EAAyB9C,EAAkBI,MAEjD,OACE,kBAAC,IAAD,CAAWE,SAAO,GAChB,kBAAC,IAAD,CAAcf,MAAOU,EAAaV,MAAOiB,SAAUP,EAAaO,WAE/DsC,EAAUrC,KAAI,SAACC,GACd,MAIIA,EAAKC,KAHPC,EADF,EACEA,GACAW,EAFF,EAEEA,KAFF,IAGErB,YAAe6C,EAHjB,EAGiBA,WAAYC,EAH7B,EAG6BA,OAAQ7B,EAHrC,EAGqCA,UAAWO,EAHhD,EAGgDA,QAGhD,OACE,kBAAC,IAAD,CACEC,IAAKf,EACLrB,MAAOwD,EACPvC,SAAUwC,EACV5B,QAASG,EACTJ,UAAWA,EACXO,QAASA","file":"component---src-pages-index-tsx-3e28b39fbc6cf57e3811.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.span`\n    color: rgba(49, 46, 129, 1)\n`;\n\nexport const Authors = styled.span`\n    color: rgba(49, 46, 129, 1)\n`;\n\nexport const Journal = styled.span`\n    font-style: italic;\n`;\n","import React from 'react';\nimport * as Styled from './styles';\nimport { Content as StyledContent } from '../../ui/Timeline/styles'\n\ninterface Props {\n  authors: string[];\n  title: string;\n  journal: string;\n  year: string;\n  link: string;\n}\n\nconst Publication: React.FC<Props> = ({ authors, title, journal, year, link }) => {\n  return (\n    <a href={link}>\n      <div>\n        <Styled.Authors>{authors.join(', ')}</Styled.Authors>\n        <span>{'. (' + year + ') '}</span>\n        <Styled.Title>{'“' + title}</Styled.Title>\n        <span>{'”. In: '}</span>\n        <Styled.Journal>{journal}</Styled.Journal>\n      </div>\n    </a>\n  )\n};\n\nexport default Publication;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { renderToStaticMarkup } from \"react-dom/server\"\n\nimport Timeline from 'components/ui/Timeline';\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\nimport Publication from './Publication'\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface PublicationData {\n  node: {\n    id: string;\n    frontmatter: {\n      authors: string[];\n      title: string;\n      journal: string;\n      month?: string;\n      year: string;\n      link: string;\n    };\n  };\n}\n\nconst Publications: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"publications section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"publication\" } } }\n        sort: { order: DESC, fields: frontmatter___year }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              authors\n              title\n              journal\n              year\n              link\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const publications: PublicationData[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} />\n\n      {publications.map((item) => {\n        const {\n          id,\n          frontmatter: { authors, title, journal, month, year, link }\n        } = item.node;\n\n        const pub = <Publication authors={authors} title={title} journal={journal} year={year} link={link} />\n        const staticElement = renderToStaticMarkup(pub)\n        const date = (month ? (month + ' ') : '') + year\n        return (\n          <Timeline\n            startDate={date}\n            content={staticElement}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Publications;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/ui/Timeline';\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface Experience {\n  node: {\n    id: string;\n    html: React.ReactNode;\n    frontmatter: {\n      company: string;\n      position: string;\n      startDate: string;\n      endDate: string;\n    };\n  };\n}\n\nconst Experience: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"experiences section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"experiences\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              company\n              position\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const experiences: Experience[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} />\n\n      {experiences.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { company, position, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={company}\n            subtitle={position}\n            content={html}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport HeroBanner from 'components/HeroBanner';\nimport Experience from 'components/Experience';\nimport Education from 'components/Education';\nimport Publications from 'components/Publications';\n\nconst ResumePage: React.FC = () => (\n  <Layout>\n    <SEO title=\"Resume\" />\n    <HeroBanner />\n    <Experience />\n    <hr />\n    <Education />\n    <hr />\n    <Publications />\n  </Layout>\n);\n\nexport default ResumePage;\n","import styled from 'styled-components';\n\nexport const Banner = styled.section`\n  border-bottom-width: 1px;\n  border-color: rgba(224, 231, 255, 1);\n  background-color: rgba(243, 244, 246, 1);\t\t\n`;\n\nexport const Content = styled.div`\n  margin-bottom: 2rem;\n`;\n","import React from 'react';\n\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nimport * as Styled from './styles';\n\ninterface Props {\n  title: string;\n  subtitle?: string;\n  content: React.ReactNode;\n}\n\nconst Banner: React.FC<Props> = ({ title, subtitle, content }) => (\n  <Styled.Banner>\n    <Container section>\n      <TitleSection title={title} subtitle={subtitle} center />\n      <FormatHtml content={content} />\n    </Container>\n  </Styled.Banner>\n);\n\nexport default Banner;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Banner from 'components/ui/Banner';\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface SectionHeroBanner extends SectionTitle {\n  content: string;\n}\n\nconst HeroBanner: React.FC = () => {\n  const { markdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"hero section\" } }) {\n        html\n        frontmatter {\n          title\n          subtitle\n          content\n        }\n      }\n    }\n  `);\n\n  const heroBanner: SectionHeroBanner = markdownRemark.frontmatter;\n\n  return (\n    <Banner\n      title={heroBanner.title}\n      subtitle={heroBanner.subtitle}\n      content={markdownRemark.html}\n    />\n  );\n};\n\nexport default HeroBanner;\n","import React from 'react';\n\ninterface Props {\n  content: any;\n  className?: string;\n}\n\nconst FormatHtml: React.FC<Props> = ({ content, className = \"format-html\" }) => (\n  <div style={{ maxWidth: '100%' }}\n    className={className}\n    dangerouslySetInnerHTML={{\n      __html: content\n    }}\n  />\n);\n\nexport default FormatHtml;\n","import styled from 'styled-components';\n\nexport const Timeline = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 640px) {\n    flex-direction: row;\n  }\n  width: 100%;\n  padding: 1rem;\n  position: relative;\n  border: 0px;\n  border-left-width: 1px;\t\n  border-color: rgba(199, 210, 254, 1);\n  border-style: solid;\n  &:last-child {\n    padding-bottom: 0px;\n  }\n`;\n\nexport const Details = styled.div`\n  width: 100%;\n  @media (min-width: 640px) { \n    width: 33.333333%;\n   };\n`;\n\nexport const Content = styled.div`\n  width: 100%;\n  margin-top: 1rem;\n  @media (min-width: 640px) { \n    width: 66.666667%;\n    margin-top: 0rem;\n   };\n`;\n\nexport const Title = styled.div`\n  font-weight: 600;\n  margin-top: 0.75rem;\n`;\n\nexport const Subtitle = styled.div`\n  font-size: 0.75rem;\n  line-height: 1rem;\n`;\n\nexport const Date = styled.div`\n  font-size: 0.75rem;\n  line-height: 1rem;\n  border-width: 1px;\n  border-color: rgba(79, 209, 197, 1);\n  border-style: solid;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  border-radius: 9999px;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  width: fit-content;\n`;\n\nexport const Point = styled.span`\n  position: absolute;\n  border-width: 1px;\n  width: 0.75rem;\n  height: 0.75rem;\n  border-style: solid;\n  border-color: rgba(204, 215, 255, 1);\n  background-color: rgba(224, 231, 255, 1);\n  border-radius: 9999px;\n  left: -7px;\n  top: 18px;\n`;\n","import React from 'react';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nimport * as Styled from './styles';\n\ninterface Props {\n  title?: string;\n  subtitle?: string;\n  content?: React.ReactNode;\n  startDate: string;\n  endDate?: string;\n}\n\nconst Timeline: React.FC<Props> = ({ title, subtitle, content, startDate, endDate }) => (\n  <Styled.Timeline>\n    <Styled.Point />\n    <Styled.Details>\n      <Styled.Date>\n        {startDate} {endDate && `- ${endDate}`}\n      </Styled.Date>\n      {title && <Styled.Title>{title}</Styled.Title>}\n      {subtitle && <Styled.Subtitle>{subtitle}</Styled.Subtitle>}\n    </Styled.Details>\n    {content && <Styled.Content><FormatHtml content={content} /></Styled.Content>}\n  </Styled.Timeline>\n);\n\nexport default Timeline;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/ui/Timeline';\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface Education {\n  node: {\n    id: string;\n    html: React.ReactNode;\n    frontmatter: {\n      university: string;\n      degree: string;\n      startDate: string;\n      endDate: string;\n    };\n  };\n}\n\nconst Education: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"education section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"education\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              university\n              degree\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const education: Education[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} />\n\n      {education.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { university, degree, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={university}\n            subtitle={degree}\n            content={html}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Education;\n"],"sourceRoot":""}